apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.oscarrrweb.sarva"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testApplicationId "com.cccdlabs.sarva.test"
        testInstrumentationRunner getInstrumentation()

        // Uncomment this to clear app data before each test when running with orchestrator
        // testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'TEST_TAGS', '"' + getTestTags() + '"'
            buildConfigField 'String', 'TEST_SCENARIO', '"' + getTestScenario() + '"'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test {
            resources.srcDirs += ['src/test/resources']
        }

        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

    testOptions {
        // uncomment this to run tests with orchestrator
        // execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

def androidVersion = "1.0.0"
def androidUnitTestVersion = "1.1.0"
def androidInstrTestVersion = "1.1.1"
def butterknifeVersion = "10.0.0"
def constraintLayoutVersion = "1.1.2"
def cucmberVersion = "4.3.0"
def daggerVersion = "2.21"
def espressoVersion = "3.1.1"
def gsonVersion = "2.8.5"
def junitVersion = "4.12"
def leakcanaryVersion = "1.6.3"
def mockitoVersion = "2.8.9"
def nearbyVersion = "16.0.0"
def okHttpVersion = "3.12.1"
def retrofitVersion = "2.5.0"
def robolectricVersion = "4.1"
def roomVersion = "2.0.0-beta01"
def rxJavaVersion = "2.1.1"
def rxIdlerVersion = "0.9.1"
def timberVersion = "4.5.1"

def getInstrumentation() {
    project.hasProperty('junit') ?
            'androidx.test.runner.AndroidJUnitRunner' :
            'com.cccdlabs.sarva.test.CucumberTestRunner'
}

def getTestTags() {
    project.getProperties().get('tags') ?: ''
}
def getTestScenario() {
    project.getProperties().get('scenario') ?: ''
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.legacy:legacy-support-v4:${androidVersion}"
    implementation "com.google.android.material:material:${androidVersion}"
    implementation "androidx.appcompat:appcompat:${androidVersion}"
    implementation "androidx.preference:preference:${androidVersion}"
    implementation "androidx.cardview:cardview:${androidVersion}"
    implementation "androidx.recyclerview:recyclerview:${androidVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"

    // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${daggerVersion}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:${rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

    // Google GSON
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // Room database
    implementation "androidx.room:room-runtime:${roomVersion}"
    annotationProcessor "androidx.room:room-compiler:${roomVersion}"

    // Nearby
    implementation "com.google.android.gms:play-services-nearby:${nearbyVersion}"

    // Uncomment to use Butterknife
    // NOTE: Requires API 26 or higher, look for TODO: Convert to Butterknife
    // to update
    // implementation "com.jakewharton:butterknife:${butterknifeVersion}"
    // annotationProcessor "com.jakewharton:butterknife-compiler:${butterknifeVersion}"

    // Timber logging
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    // Unit Test dependencies
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "androidx.test:core:${androidUnitTestVersion}"
    testImplementation "androidx.test:runner:${androidUnitTestVersion}"
    testImplementation "androidx.test.ext:junit:${androidUnitTestVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "androidx.room:room-testing:${roomVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okHttpVersion}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Uncomment to use Robolectric Shadows support
    // CURRENTLY NOT SUPPORTED WITH AndroidX
    // testImplementation "org.robolectric:shadows-supportv4:${robolectricVersion}"

    // Android Instrumented Test dependencies
    androidTestImplementation "androidx.annotation:annotation:${androidVersion}"
    androidTestImplementation "androidx.test:rules:${androidInstrTestVersion}"
    androidTestImplementation "androidx.test:runner:${androidInstrTestVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${espressoVersion}"

    // Wrapper for RxJava Schedulers in Espresso tests
    androidTestImplementation "com.squareup.rx.idler:rx2-idler:${rxIdlerVersion}"

    // Cucumber (for use with Espresso)
    androidTestImplementation "io.cucumber:cucumber-android:${cucmberVersion}"
    androidTestImplementation "io.cucumber:cucumber-picocontainer:${cucmberVersion}"

    // Uncomment this to run instrumentation tests with Mockito
    // androidTestImplementation "org.mockito:mockito-android:${mockitoVersion}"

    // Uncomment this to run instrumentation tests with orchestrator
    // androidTestUtil "androidx.test:orchestrator:${androidInstrTestVersion}"

    // Uncomment this to run instrumentation tests with Dagger 2
    // androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakcanaryVersion}"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${leakcanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanaryVersion}"
}
